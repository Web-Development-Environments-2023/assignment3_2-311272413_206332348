openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All reciepes general info
paths:
  /register:
    post:
      tags:
      - Auth
      summary: Create a new user.
      description: A new user from the client is added to the server.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: New user successfully added.
        "400":
          description: Bad request due to missing or invalid parameters.
        "409":
          description: "Conflict error, username already exists in the system."
  /login:
    post:
      tags:
      - Auth
      summary: Login with an existing user.
      description: Authenticate an existing user in the system.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        "200":
          description: Successful authentication. The session ID is returned in a cookie named `session`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inline_response_200'
        "400":
          description: Bad request. Invalid or missing parameters.
        "401":
          description: Authentication failed. Invalid username or password.
  /logout:
    post:
      tags:
      - Auth
      summary: Logout a user from the system and delete their session cookie.
      responses:
        "200":
          description: User successfully logged out.
        "401":
          description: Unauthorized. User is not authenticated.
        "404":
          description: Not Found. User session or resource not found.
  /users/userRecipes:
    get:
      tags:
        - Users
      summary: Return recipes created by logged in user
      description: Array of recipes and its description
      responses:
        "200":
          description: Recipes information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecipePreview"
        "401":
          description: Unauthorized
      security:
        - cookieAuth: []
    post:
      tags:
        - Users
      summary: Create recipe to user's recipes list 
      description: Insert recipe to saved users recipes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecipePreview"
        required: true
      responses:
        "201":
          description: Recipe was successfully saved
        "400":
          description: Failed to upload recipe, wrong parmters
        "401":
          description: Unauthorized
      security:
        - cookieAuth: []
  /recipes/random:
    get:
      tags:
        - Recipes
        - Random
      summary: Explore diffrent random recepies
      description: send to the client 3 random recepies.
      responses:
        "200":
          description: the server returned 3 new recepies to be explored
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecipePreview"
  /recipes/search/query/{query}:
    get:
      tags:
      - Users
      - Recipes
      summary: Search recipes
      description: Retrieves a list of recipes return from Spoonacular apiwith filters.
      parameters:
      - name: query
        in: path
        description: query to search.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: Pizza
      - name: number
        in: query
        description: "Size of the returned list. Allowed values: 15, 10, 5. Default is 5."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 5
          enum:
          - 15
          - 10
          - 5
      - name: intolerance
        in: query
        description: "Intolerances for the recipes."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          enum:
              - Dairy
              - Egg
              - Gluten
              - Grain
              - Peanut
              - Seafood
              - Sesame
              - Shellfish
              - Soy
              - Sulfite
              - Tree Nut
              - Wheat
      - name: cuisine
        in: query
        description: "Cuisine types for the recipes."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          enum:
            - African
            - Asian
            - American
            - British
            - Cajun
            - Caribbean
            - Chinese
            - Eastern European
            - European
            - French
            - German
            - Greek
            - Indian
            - Irish
            - Italian
            - Japanese
            - Jewish
            - Korean
            - Latin American
            - Mediterranean
            - Mexican
            - Middle Eastern
            - Nordic
            - Southern
            - Spanish
            - Thai
            - Vietnamese
      - name: diet
        in: query
        description: "Diet types for the recipes."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          enum:
            - Gluten Free
            - Ketogenic
            - Vegetarian
            - Lacto-Vegetarian
            - Ovo-Vegetarian
            - Vegan
            - Pescetarian
            - Paleo
            - Primal
            - Low FODMAP
            - Whole30
      responses:
        "200":
          description: Recipes found matching the search criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "204":
          description: No results found matching the search criteria.
  /recipes/showRecipe/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his ID
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists

  /users/addNewUserRecipe:
    get:
      tags:
        - Users
      summary: Return the recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecipePreview"
        "401":
          description: user is not authorized
        "404":
          description: user recepies doesn't exist.
      security:
        - cookieAuth: []
    post:
      tags:
        - Users
      summary: save recipe in my recipes list of a user
      description: save recipe in my recipes list of a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecipePreview"
        required: true
      responses:
        "201":
          description: The Recipe successfully saved
        "400":
          description: the Recipe upload faild, wrong parmters
        "401":
          description: user is not authorized
      security:
        - cookieAuth: []
  /users/lastSeenRecipes:
    get:
      tags:
      - Users
      summary: Get user's last lastSeen recipes.
      description: Retrieves the details of a user's last seen recipes.
      operationId: detailLastSeenRecipes
      responses:
        "200":
          description: Details of a user's last seen recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "400":
          description: Bad input parameter.
    post:
      tags:
      - Users
      summary: Update logged in user last seen recipes.
      description: 3 Last seen recipes of the logged-in user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lastSeenRecipes'
        required: true
      responses:
        "201":
          description: Last seen recipes updated.
        "400":
          description: At least one recipe id is wrong!.
  /users/familyRecipes:
    get:
      tags:
      - Users
      - Recipes
      summary: Get user's family recipes.
      description: Retrieves the details of the user's family recipes.
      operationId: DetailFamilyRecipes
      responses:
        "200":
          description: Details of the user's family recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        "400":
          description: Bad input parameter.
  /users/favorites:
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reciepeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
components:
  schemas:
    User:
      required:
      - confirmPassword
      - country
      - email
      - firstname
      - lastname
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: The username must contain between 3 and 8 letters only.
          example: admin
        firstname:
          type: string
          description: The user's first name.
          example: admin
        lastname:
          type: string
          description: The user's last name.
          example: admin
        country:
          type: string
          description: The user's country.
          example: United States
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: The password must contain between 5 and 10 characters and include at least one number and one special character.
          format: password
          example: pass123!
        confirmPassword:
          maxLength: 10
          minLength: 5
          type: string
          description: The confirmed password to match the entered password.
          format: password
          example: pass123!
        email:
          pattern: email
          type: string
          description: The user's email address.
          example: admin@example.com
      description: Information about a user in the system.
    Login:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: Username should contain only letters.
          example: admin
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: Password should contain at least one number and one special character.
          format: password
          example: pass123!
      description: Object containing login credentials.
    RecipePreview:
      required:
        - fullRecipe
        - user_id
        - glutenFree
        - image
        - popularity
        - readyInMinutes
        - title
        - vegan
        - vegetarian
      type: object
      properties:
        user_id:
          type: integer
          description: the recipe owner user identifier
        title:
          type: string
          description: the recipe name
          example: Pizza
        image:
          type: string
          description: the recipe img
          format: url
          example: "https://sugarspunrun.com/wp-content/uploads/2023/02/sourdough-pizza-dough-recipe-6-of-8.jpg"
        readyInMinutes:
          type: integer
          description: the recipe total preparation time in minutes
          example: 30
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 200
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: true
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
        fullRecipe:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/FullRecipe"
          description: Full Recipe with the ingredients as keys and amount as value
    FullRecipe:
      required:
        - instructions
        - servings
        - ingredients
      type: object
      properties:
        ingredients:
          type: array
          description: recipe ingredients
          example:
            - name: dough
              amount: 500
              unit: g
            - name: tomato sauce
              amount: 200
              unit: g
            - name: mozzarella cheese
              amount: 200
              unit: g
            - name: toppings
              amount: "as desired"
              unit: ""
          items:
            $ref: "#/components/schemas/RecipeIngredient"
        servings:
          type: integer
          example: 4
          description: number of servings the recipe produces
        instructions:
          type: string
          example: "1. Roll out the dough. 2. Spread tomato sauce on the dough. 3. Add cheese and desired toppings. 4. Bake in the oven at 200°C for 15-20 minutes. 5. Enjoy your homemade pizza!"
          description: recipe instructions
    RecipeIngredient:
      type: object
      properties:
        name:
          type: string
          # example: suger
        amount:
          type: integer
          # example: 200
        unit:
          type: string
          # example: g
    lastSeenRecipes:
          type: object
          properties:
            recipeID_1:
              type: integer
              description: First seen recipe id.
              example: 648852
            recipeID_2:
              type: integer
              description: Second seen recipe id.
              example: 648855
            recipeID_3:
              type: integer
              description: Third seen recipe id.
              example: null
          description: Object containing login credentials.   
    Recipe:
      required:
      - Instructions
      - recipeIngredients
      - yield
      type: object
      properties:
        recipePrev:
          $ref: '#/components/schemas/RecipePreview'
        recipeIngredients:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/RecipeIngredients'
          description: Dictionary with the ingredients as keys and amount as value.
        yield:
          type: integer
          description: Number of servings the recipe produces.
        Instructions:
          type: array
          description: Recipe instructions in order.
          items:
            type: string
    RecipeIngredients:
      required:
      - ingredients
      - recipeId
      type: object
      properties:
        recipeId:
          type: integer
          description: The ID of the recipe.
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
      description: Dictionary with the ingredients as keys and amounts as values.
    Ingredient:
      type: object
      properties:
        key:
          type: string
          example: suger
        value:
          type: string
          example: 1 cup
    Inline_response_200:
      type: object
      properties:
        isAssociationMember:
          type: boolean
          description: Indicates whether the user is an association member or not.
          example: true

# paths:
#   /register:
#     post:
#       tags:
#       - Auth
#       summary: A new user from the client is added to the server
#       description: A JSON object contains all the details about the new user.
#       requestBody:
#         description: Inventory item to add
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/User'
#         required: true
#       responses:
#         "201":
#           description: A new user has been added
#         "400":
#           description: wrong input parameters
#   /login:
#     post:
#       tags:
#       - Auth
#       summary: Login an exist user
#       description: An exist user login to the system
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/LoginScheme'
#         required: true
#       responses:
#         "200":
#           description: |
#             User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
#           headers:
#             Set-Cookie:
#               style: simple
#               explode: false
#               schema:
#                 type: string
#                 example: session=87s97sdhgf279293f8w0e9
#         "401":
#           description: Authentication failed
#   /logout:
#     post:
#       tags:
#         - Auth
#       summary: logout a user from the system and delete his cookie
#       responses:
#         "200":
#           description: "the user has ben successfully logged out"
#   /users/favorites:
#     get:
#       tags:
#       - Users
#       summary: Return the favorite recipes that were saved by user
#       description: Get an array of recipes that were saved by a specific user
#       responses:
#         "200":
#           description: data about the user's favorites recipes returned
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   $ref: '#/components/schemas/RecipePreview'
#         "401":
#           description: user is not authorized
#       security:
#       - cookieAuth: []
#     post:
#       tags:
#       - Users
#       summary: save recipe in the favorites list of a user
#       description: save recipe in the favorites list of a user
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 reciepeId:
#                   type: string
#                   description: reciepe's id which the user saved
#                   example: 716429
#       responses:
#         "200":
#           description: The Recipe successfully saved as favorite
#         "401":
#           description: user is not authorized
#       security:
#       - cookieAuth: []
#   /recipes/{recipeId}:
#     get:
#       tags:
#       - Recipes
#       summary: Return preview details on recipe by his ID
#       description: Return preview details on recipe by his ID
#       parameters:
#       - name: recipeId
#         in: path
#         description: recipe's id
#         required: true
#         style: simple
#         explode: false
#         schema:
#           type: integer
#       responses:
#         "200":
#           description: data about the recipe
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/RecipePreview'
#         "404":
#           description: recipeId is not exists
# components:
#   schemas:
#     User:
#       type: object
#       properties:
#         username:
#           maxLength: 8
#           minLength: 3
#           type: string
#           description: username conatins between 3 to 8 letters only
#           example: my_name
#         firstname:
#           type: string
#           description: user's first name
#           example: my_first_name
#         lastname:
#           type: string
#           description: user's last name
#           example: my_last_name
#         country:
#           type: string
#           description: user's country
#           example: Israel
#         password:
#           maxLength: 10
#           minLength: 5
#           type: string
#           description: password conatins between 5 to 10 chars, at least one of them
#             is a number and a special char
#           format: password
#           example: my_name@12
#         email:
#           pattern: email
#           type: string
#           description: user's email
#           example: my_name12@gmail.com
#         # image-url:
#         #   pattern: URL
#         #   type: string
#         #   description: URL for the user's image
#         #   example: https://cloudinary.com/
#       description: Model containing user info
#     LoginScheme:
#       type: object
#       properties:
#         username:
#           maxLength: 8
#           minLength: 3
#           type: string
#           description: username conatins letters only
#         password:
#           maxLength: 10
#           minLength: 5
#           description: password conatins at least one number and one special char
#           format: password
#       example:
#         username: my_name
#         password: my_name@12
#     RecipePreview:
#       type: object
#       properties:
#         id:
#           type: integer
#           description: recipe identifier
#           example: 102
#         title:
#           type: string
#           description: recipe name
#           example: Simple Macaroni and Cheese
#         image:
#           type: string
#           description: recipe image
#           format: URL
#           example: https://spoonacular.com/recipeimages/655455-566x370.jpg
#         readyInMinutes:
#           type: integer
#           description: the time takes to make this recipe
#           example: 45
#         popularity:
#           type: integer
#           description: how many likes got this recipe
#           example: 5987
#         vegetarian:
#           type: boolean
#           description: indication if the recipe is vegetarian
#           example: false
#         vegan:
#           type: boolean
#           description: indication if the recipe is vegan
#           example: false
#         glutenFree:
#           type: boolean
#           description: indication if the recipe is gluten free
#           example: false
  






